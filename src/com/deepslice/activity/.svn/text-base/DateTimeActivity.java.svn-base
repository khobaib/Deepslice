package com.deepslice.activity;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import android.app.Activity;
import android.app.DatePickerDialog;
import android.app.TimePickerDialog;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.TimePicker;

import com.deepslice.utilities.AppProperties;
import com.deepslice.utilities.AppSharedPreference;
import com.deepslice.utilities.Utils;
import com.deepslice.vo.LocationDetails;

public class DateTimeActivity extends Activity implements
		OnClickListener {

	EditText nameEditText;
	EditText emailEditText;
	EditText phoneEditText;
	Button registerButton;
	Button startOrtderButton;
	CheckBox sendEmailCheckBox;
	TextView datePick,timePick;
	Date openTime;
	Date closeTime;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.date_time_select);
		this.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
		
		TextView storeName=(TextView)findViewById(R.id.textView2);
		Bundle b = this.getIntent().getExtras();
//		String location=b.getString("location");
		String store=b.getString("store");
		storeName.setText(store);
		
		LocationDetails selectedLocation = AppProperties.getLocationObj(DateTimeActivity.this);
		openTime = AppProperties.parseStringDate(selectedLocation.getOpeningTime(),"M/dd/yyyy h:mm:ss a");
		closeTime = AppProperties.parseStringDate(selectedLocation.getClosingTime(),"M/dd/yyyy h:mm:ss a");
		Date currentTime=Calendar.getInstance().getTime();
		
		boolean isOpen=false;
		if(currentTime.getHours() > openTime.getHours() && currentTime.getHours() < closeTime.getHours())
			isOpen=true;

		if(isOpen==false)
		{
			TextView storeOpenStatus=(TextView)findViewById(R.id.textView4);
			storeOpenStatus.setText("Your selected store is currently Closed. Please select your order date and time below:");
		}
		initializeAllViews() ;
	}

	private void initializeAllViews() {
		startOrtderButton=(Button)findViewById(R.id.startOrderingButton);
		startOrtderButton.setOnClickListener(this);
		
		datePick=(TextView)findViewById(R.id.datePick);
		datePick.setOnClickListener(this);
		
		timePick=(TextView)findViewById(R.id.timePick);
		timePick.setOnClickListener(this);

		Calendar cal=Calendar.getInstance();
		SimpleDateFormat date_format = new SimpleDateFormat("EEE dd-MMM");
	    String formated=date_format.format(cal.getTime());
		datePick.setText(formated);
		
		timePick.setText(getFullTime(cal.get(Calendar.HOUR_OF_DAY) ,cal.get(Calendar.MINUTE)));
		
		
		TextView storeTime=(TextView)findViewById(R.id.textView3);
		storeTime.setText("The store current time is "+getFullTime(cal.get(Calendar.HOUR_OF_DAY) , cal.get(Calendar.MINUTE)));
		
		ImageView emgBack= (ImageView)findViewById(R.id.farwordImageView);
		emgBack.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {
				finish();
			}
		});
	}

	@Override
	public void onClick(View view) {
		switch (view.getId()) {

		case R.id.startOrderingButton:
			
			if(AppProperties.isLoogedIn)
				startActivity(new Intent(new Intent(this, MyOrderActivity.class)));
			else
				startActivity(new Intent(new Intent(this, CustomerDetailsActivity.class)));
			
			AppSharedPreference.putData(DateTimeActivity.this, "deliveryTime", startOrtderButton.getText().toString());
			break;
		case R.id.datePick:
			DatePickerDialog datePick=null;
			Calendar cal2=Calendar.getInstance();
			datePick=new DatePickerDialog(DateTimeActivity.this, callBackDatePick, cal2.get(Calendar.YEAR),cal2.get(Calendar.MONTH), cal2.get(Calendar.DAY_OF_MONTH));
			datePick.show();
			break;
		case R.id.timePick:
			TimePickerDialog timePickDiag = null;
			Calendar cal=Calendar.getInstance();
			
			timePickDiag=new TimePickerDialog(DateTimeActivity.this, callBackTimePick, cal.get(Calendar.HOUR_OF_DAY), cal.get(Calendar.MINUTE), true);
			timePickDiag.show();
			break;

		default:
			break;
		}

	}
	
	private TimePickerDialog.OnTimeSetListener callBackTimePick = new TimePickerDialog.OnTimeSetListener() {
		@Override
		public void onTimeSet(TimePicker view, int hourOfDay, int minute) {
			timePick.setText( getFullTime(hourOfDay,minute));
			if(hourOfDay > openTime.getHours() && hourOfDay < closeTime.getHours())
			{
				startOrtderButton.setText(timePick.getText() + ", "+datePick.getText());
			}
			else{
				Utils.openErrorDialog(DateTimeActivity.this, "Store is not open on selected time.\nPlease select some other time!");
			}
			
		}
	};

	private DatePickerDialog.OnDateSetListener callBackDatePick = new DatePickerDialog.OnDateSetListener() {
		@Override
		public void onDateSet(DatePicker view, int year, int monthOfYear,
				int dayOfMonth) {

			Calendar cal=Calendar.getInstance();
			
			cal.set(Calendar.YEAR, year);
			cal.set(Calendar.MONTH, monthOfYear);
			cal.set(Calendar.DAY_OF_MONTH, dayOfMonth);
			
			SimpleDateFormat date_format = new SimpleDateFormat("EEE dd-MMM");
		    String formated=date_format.format(cal.getTime());
			datePick.setText(formated);
			startOrtderButton.setText(timePick.getText() + ", "+datePick.getText());
		}
	};
	
	public String getFullTime(int h, int m){
		String time="00:00";
		String hour=String.valueOf(h);
		String minute=String.valueOf(m);
		if(h<10)
			hour="0"+hour;
		if(m<10)
			minute="0"+minute;
		
		time=hour+":"+minute;
		return time;
	}
}
